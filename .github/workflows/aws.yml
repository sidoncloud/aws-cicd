name: Deploy to Amazon ECS
on:
  push:
    branches:
      - "main"
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: batch_ingestion
  ECS_CLUSTER: batch_ingestion
  ECS_TASK_DEFINITION: .github/workflows/task-definition.json
  CONTAINER_NAME: rd-ingestion-container
permissions:
  id-token: write
  contents: read
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: arn:aws:iam::127489365181:role/gitaction-ecs-batch-role
        role-session-name: gitaction-ecs-batch-role
        aws-region: ${{ env.AWS_REGION }}
        # web-identity-token-file: ${{ steps.id-token.outputs.token }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    # - name: Register the ECS task definition
    #   id: register-task-def
    #   run: |
    #     aws ecs register-task-definition --cli-input-json file://${{ env.ECS_TASK_DEFINITION }}
    - name: Run ECS task
      run: |
        aws ecs run-task \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task-definition redshift-ingestion \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-0ca83d7be1c28920c,subnet-09e2950dc4425ecb4],securityGroups=[sg-055e50e266d8c8d21],assignPublicIp=ENABLED}"
